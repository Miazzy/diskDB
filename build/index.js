"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiskDB = void 0;
const global_1 = require("./global");
const helper_1 = require("./helper");
const async_1 = require("async");
const nanoid_1 = require("nanoid");
const path_1 = require("path");
class DiskDB {
    constructor(options) {
        this.store = new Map();
        options.path = options.path || __dirname;
        if (options.collections.length === 0) {
            helper_1.ERR.log(global_1.MESSAGES.ERROR.COLL_MT);
            throw new Error(global_1.MESSAGES.ERROR.COLL_MT);
        }
        this.options = options;
    }
    addDocumentToCollection(collectionName, doc) {
        const coll = this.findOneCollection(collectionName);
        if (!coll) {
            helper_1.ERR.log(global_1.MESSAGES.ERROR.COLL_NF + collectionName);
            return false;
        }
        try {
            const data = coll.documents;
            if (Array.isArray(doc)) {
                doc.forEach((d) => {
                    const dbDoc = {
                        _id: nanoid_1.nanoid(),
                        data: d,
                        meta: helper_1.getMeta(),
                    };
                    data.push(dbDoc);
                });
            }
            else {
                data.push({
                    _id: nanoid_1.nanoid(),
                    data: doc,
                    meta: helper_1.getMeta(),
                });
            }
            coll.documents = data;
            return true;
        }
        catch (error) {
            throw new Error(error);
        }
    }
    findCollections() {
        return this.store;
    }
    findDocumentFromCollectionByID(collectionName, docId) {
        const coll = this.findOneCollection(collectionName);
        let doc = {};
        if (!coll) {
            helper_1.ERR.log(global_1.MESSAGES.ERROR.COLL_NF + collectionName);
            return false;
        }
        const docs = coll.documents;
        if (docs.length === 0) {
            return doc;
        }
        docs.forEach((docm) => {
            if (docm._id === docId) {
                doc = docm;
                return;
            }
        });
        return doc;
    }
    findDocumentsFromCollectionByQuery(collectionName, docId) {
        const coll = this.findOneCollection(collectionName);
        let doc = {};
        if (!coll) {
            helper_1.ERR.log(global_1.MESSAGES.ERROR.COLL_NF + collectionName);
            return false;
        }
        const docs = coll.documents;
        if (docs.length === 0) {
            return doc;
        }
        docs.forEach((docm) => {
            if (docm._id === docId) {
                doc = docm;
                return;
            }
        });
        return doc;
    }
    findOneCollection(collectionName) {
        return this.store.get(collectionName);
    }
    loadCollections() {
        return new Promise((resolve, reject) => {
            async_1.each(this.options.collections, (collectionName, callback) => __awaiter(this, void 0, void 0, function* () {
                helper_1.LOG.log(global_1.MESSAGES.INFO.PRCG + collectionName);
                if (!collectionName.includes(global_1.EXT_JSON)) {
                    collectionName = `${collectionName}${global_1.EXT_JSON}`;
                }
                const collectionFile = path_1.join(this.options.path, collectionName);
                const fsExists = yield helper_1.fileExists(collectionFile);
                let fileContents = JSON.parse(global_1.EMPTY_ARRAY);
                if (!fsExists) {
                    yield helper_1.writeToCollection(collectionFile, JSON.stringify(fileContents));
                }
                else {
                    fileContents =
                        (yield helper_1.readFromCollection(collectionFile)) || fileContents;
                }
                const coll = {
                    documents: fileContents ? fileContents : [],
                    name: collectionName.replace(global_1.EXT_JSON, ''),
                    path: collectionFile,
                };
                this.store.set(coll.name, coll);
                callback();
            }), err => {
                if (err) {
                    helper_1.ERR.log(global_1.MESSAGES.ERROR.LOAD_FL + err.message);
                    reject(global_1.MESSAGES.ERROR.LOAD_FL);
                    throw new Error(global_1.MESSAGES.ERROR.LOAD_FL + err.message);
                }
                else {
                    helper_1.LOG.log(global_1.MESSAGES.INFO.COLL_LD_DONE);
                    resolve(this.store);
                }
            });
        });
    }
    removeCollection(collectionName) {
        return this.store.delete(collectionName);
    }
    removeDocumentFromCollection(collectionName, docId) {
        const coll = this.findOneCollection(collectionName);
        if (!coll) {
            helper_1.ERR.log(global_1.MESSAGES.ERROR.COLL_NF + collectionName);
            return false;
        }
        try {
            coll.documents = coll.documents.filter((d) => d._id !== docId);
            return true;
        }
        catch (error) {
            throw new Error(error);
        }
    }
}
exports.DiskDB = DiskDB;
//# sourceMappingURL=data:application/json;base64,